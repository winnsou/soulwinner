
def Multiples_of_3_and_5():
    """
    Problem1: If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
    The sum of these multiples is 23.Find the sum of all the multiples of 3 or 5 below 1000.
    """
    print "*** Sum of 'Multiples of 3 or 5' in natural numbers below 1000 ***"
    sum_of_multiples_of_3_or_5=0
    for i in range(1,1000):
        if (i % 3 == 0) or (i % 5 == 0):
            sum_of_multiples_of_3_or_5+=i
    print "Sum of these multiples is ", sum_of_multiples_of_3_or_5


def EvenFibonacciNumbers():
    """
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """
    fib_series=[1,2]
    sum_of_even_value_in_series=2
    while(fib_series[-1] < 4000000):
        fib_series.append(fib_series[-1]+fib_series[-2])
        if fib_series[-1]%2==0:
            sum_of_even_value_in_series+=fib_series[-1]
    print "Sum of even value in series is ", sum_of_even_value_in_series
    print fib_series

def LargestPrimeFactor():
    """
    The prime factors of 13195 are 5, 7, 13 and 29.

    What is the largest prime factor of the number 600851475143 ?
    """
    print "Hello World"




if __name__ == '__main__':
    #Multiples_of_3_and_5()
    #EvenFibonacciNumbers()
    LargestPrimeFactor()